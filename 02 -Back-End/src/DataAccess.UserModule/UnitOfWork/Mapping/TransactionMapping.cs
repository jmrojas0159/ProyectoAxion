//------------------------------------------------------------------------------
// <auto-generated>
// </auto-generated>
//------------------------------------------------------------------------------




using System.Data.Entity.ModelConfiguration;
using System.Runtime.Serialization;
using Core.Entities;

namespace DataAccess.UserModule.UnitOfWork.Mapping
{
    using System;
    using System.Collections.Generic;
    
    public partial class TransactionMapping:EntityTypeConfiguration<Core.Entities.User.Transaction>
    {
        
        public TransactionMapping()
        {
                // Primary Key
                this.HasKey(t => t.Id);
    
    
                // Properties
    
                this.ToTable("Transaction","dbo");
        this.Property(t => t.Id).HasColumnName("Id");
        this.Property(t => t.IdStatus).HasColumnName("IdStatus");
        this.Property(t => t.IdTransactionType).HasColumnName("IdTransactionType");
        this.Property(t => t.IdClient).HasColumnName("IdClient");
        this.Property(t => t.IdProduct).HasColumnName("IdProduct");
        this.Property(t => t.Amount).HasColumnName("Amount");
        this.Property(t => t.UnitValue).HasColumnName("UnitValue");
        this.Property(t => t.TotalValue).HasColumnName("TotalValue");
        this.Property(t => t.CreatedDate).HasColumnName("CreatedDate");
        this.Property(t => t.UpdateDate).HasColumnName("UpdateDate");
        this.Property(t => t.IdUser).HasColumnName("IdUser");
    
                // Relationships
                this.HasRequired(t => t.Client)
                    .WithMany(t => t.Transaction)
                    .HasForeignKey(d => d.IdClient);
                this.HasRequired(t => t.Product)
                    .WithMany(t => t.Transaction)
                    .HasForeignKey(d => d.IdProduct);
                this.HasRequired(t => t.Status)
                    .WithMany(t => t.Transaction)
                    .HasForeignKey(d => d.IdStatus);
                this.HasRequired(t => t.TransactionType)
                    .WithMany(t => t.Transaction)
                    .HasForeignKey(d => d.IdTransactionType);
                this.HasOptional(t => t.User)
                    .WithMany(t => t.Transaction)
                    .HasForeignKey(d => d.IdUser);
    
    
    
        }
    
        
        
        
        
        
        
        
        
        
        
        
    
        
        
        
        
        
    }
}
